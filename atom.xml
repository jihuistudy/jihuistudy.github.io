<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>纪惠de博客</title>
  <icon>https://jihuistudy.github.io/icon.png</icon>
  <subtitle>每一篇文件都是我成长的见证</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jihuistudy.github.io/"/>
  <updated>2021-03-10T05:28:05.333Z</updated>
  <id>https://jihuistudy.github.io/</id>
  
  <author>
    <name>纪惠</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【HTML】Web标准和W3C</title>
    <link href="https://jihuistudy.github.io/2021/03/09/%E3%80%90HTML%E3%80%91Web%E6%A0%87%E5%87%86%E5%92%8CW3C/"/>
    <id>https://jihuistudy.github.io/2021/03/09/%E3%80%90HTML%E3%80%91Web%E6%A0%87%E5%87%86%E5%92%8CW3C/</id>
    <published>2021-03-09T08:18:07.000Z</published>
    <updated>2021-03-10T05:28:05.333Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;Web标准&quot;&gt;&lt;a href=&quot;#Web标准&quot; class=&quot;headerlink&quot; title=&quot;Web标准&quot;&gt;&lt;/a&gt;Web标准&lt;/h1&gt;&lt;p&gt;Web标准不是某一个标准，而是由W3C组织和其他标准化组织制定的一系列标准的集合。&lt;/p&gt;
&lt;h2
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML" scheme="https://jihuistudy.github.io/tags/HTML/"/>
    
      <category term="黑马笔记" scheme="https://jihuistudy.github.io/tags/%E9%BB%91%E9%A9%AC%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【HTML】常见浏览器内核</title>
    <link href="https://jihuistudy.github.io/2021/03/09/%E3%80%90HTML%E3%80%91%E5%B8%B8%E8%A7%81%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    <id>https://jihuistudy.github.io/2021/03/09/%E3%80%90HTML%E3%80%91%E5%B8%B8%E8%A7%81%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/</id>
    <published>2021-03-09T06:42:07.000Z</published>
    <updated>2021-03-10T05:51:24.211Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;什么是浏览器内核？&quot;&gt;&lt;a href=&quot;#什么是浏览器内核？&quot; class=&quot;headerlink&quot; title=&quot;什么是浏览器内核？&quot;&gt;&lt;/a&gt;什么是浏览器内核？&lt;/h1&gt;&lt;p&gt;浏览器内核：Rendering
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML" scheme="https://jihuistudy.github.io/tags/HTML/"/>
    
      <category term="黑马笔记" scheme="https://jihuistudy.github.io/tags/%E9%BB%91%E9%A9%AC%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【计算机基础】编程语言的分类</title>
    <link href="https://jihuistudy.github.io/2020/10/29/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E3%80%91%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%88%86%E7%B1%BB/"/>
    <id>https://jihuistudy.github.io/2020/10/29/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E3%80%91%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%88%86%E7%B1%BB/</id>
    <published>2020-10-29T03:06:01.000Z</published>
    <updated>2020-12-22T10:35:12.203Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;面向对象与面向过程的区别&quot;&gt;&lt;a href=&quot;#面向对象与面向过程的区别&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="计算机基础" scheme="https://jihuistudy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="https://jihuistudy.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>【JS】script标签</title>
    <link href="https://jihuistudy.github.io/2020/10/26/%E3%80%90JS%E3%80%91script%E6%A0%87%E7%AD%BE/"/>
    <id>https://jihuistudy.github.io/2020/10/26/%E3%80%90JS%E3%80%91script%E6%A0%87%E7%AD%BE/</id>
    <published>2020-10-26T05:28:58.000Z</published>
    <updated>2020-10-26T12:41:12.954Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>【JS】JavaScript简史</title>
    <link href="https://jihuistudy.github.io/2020/10/26/%E3%80%90JS%E3%80%91JavaScript%E7%AE%80%E5%8F%B2/"/>
    <id>https://jihuistudy.github.io/2020/10/26/%E3%80%90JS%E3%80%91JavaScript%E7%AE%80%E5%8F%B2/</id>
    <published>2020-10-26T04:31:19.000Z</published>
    <updated>2020-10-26T05:19:01.023Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;JS简史&quot;&gt;&lt;a href=&quot;#JS简史&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Event loop宏任务与微任务详解</title>
    <link href="https://jihuistudy.github.io/2020/10/24/%E3%80%90JS%E3%80%91-%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E8%AF%A6%E8%A7%A3/"/>
    <id>https://jihuistudy.github.io/2020/10/24/%E3%80%90JS%E3%80%91-%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-10-24T14:31:50.000Z</published>
    <updated>2020-10-24T14:38:53.886Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>进程与线程</title>
    <link href="https://jihuistudy.github.io/2020/10/24/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>https://jihuistudy.github.io/2020/10/24/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-10-24T11:53:17.000Z</published>
    <updated>2020-10-24T14:29:15.855Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;font color=&quot;red&quot;&gt;进程是资源分配的最小单位，线程是CPU调度的最小单位&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-什么是进程？&quot;&gt;&lt;a href=&quot;#1-什么是进程？&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="计算机基础" scheme="https://jihuistudy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="https://jihuistudy.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>【公司面经】-苏小研前端面经</title>
    <link href="https://jihuistudy.github.io/2020/10/17/%E3%80%90%E5%85%AC%E5%8F%B8%E9%9D%A2%E7%BB%8F%E3%80%91-%E8%8B%8F%E5%B0%8F%E7%A0%94%E5%89%8D%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
    <id>https://jihuistudy.github.io/2020/10/17/%E3%80%90%E5%85%AC%E5%8F%B8%E9%9D%A2%E7%BB%8F%E3%80%91-%E8%8B%8F%E5%B0%8F%E7%A0%94%E5%89%8D%E7%AB%AF%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-10-17T06:02:37.000Z</published>
    <updated>2020-10-17T06:55:14.854Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;1.进程与线程的区别&lt;br&gt;2.Event loop
        
      
    
    </summary>
    
    
      <category term="前端面经" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面经" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>存储相关</title>
    <link href="https://jihuistudy.github.io/2020/10/12/%E5%AD%98%E5%82%A8%E7%9B%B8%E5%85%B3/"/>
    <id>https://jihuistudy.github.io/2020/10/12/%E5%AD%98%E5%82%A8%E7%9B%B8%E5%85%B3/</id>
    <published>2020-10-12T00:51:28.000Z</published>
    <updated>2020-10-24T11:51:47.925Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;1-cookie&quot;&gt;&lt;a href=&quot;#1-cookie&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="存储" scheme="https://jihuistudy.github.io/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的scoped实现原理</title>
    <link href="https://jihuistudy.github.io/2020/10/12/%E3%80%90VUE%E3%80%91-Vue%E4%B8%AD%E7%9A%84scoped%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://jihuistudy.github.io/2020/10/12/%E3%80%90VUE%E3%80%91-Vue%E4%B8%AD%E7%9A%84scoped%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2020-10-12T00:27:32.000Z</published>
    <updated>2020-10-24T14:39:01.208Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;何为scoped？&quot;&gt;&lt;a href=&quot;#何为scoped？&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://jihuistudy.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>前端复习企划-VUE</title>
    <link href="https://jihuistudy.github.io/2020/10/11/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E4%BC%81%E5%88%92-VUE/"/>
    <id>https://jihuistudy.github.io/2020/10/11/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E4%BC%81%E5%88%92-VUE/</id>
    <published>2020-10-11T06:01:39.000Z</published>
    <updated>2020-10-12T07:17:30.595Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;1-说说你对MVC和MVVM架构的理解？&quot;&gt;&lt;a href=&quot;#1-说说你对MVC和MVVM架构的理解？&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式知识点整理</title>
    <link href="https://jihuistudy.github.io/2020/10/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>https://jihuistudy.github.io/2020/10/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</id>
    <published>2020-10-05T10:37:38.000Z</published>
    <updated>2020-10-05T10:39:26.132Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS入门编程题的知识点汇总</title>
    <link href="https://jihuistudy.github.io/2020/09/13/JS%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>https://jihuistudy.github.io/2020/09/13/JS%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</id>
    <published>2020-09-13T09:15:54.000Z</published>
    <updated>2020-10-18T14:35:12.575Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-保留两位小数最好的方法&quot;&gt;&lt;a href=&quot;#1-保留两位小数最好的方法&quot; class=&quot;headerlink&quot; title=&quot;1. 保留两位小数最好的方法&quot;&gt;&lt;/a&gt;1. 保留两位小数最好的方法&lt;/h1&gt;&lt;p&gt;1.str.split(“符号”) 将字符串以自定义符号分割成数组，以数组索引值来获取被分割的字符串。&lt;br&gt;2.Math.round(num * 100) / 100; 实现数字的小数四舍五入并保留两位小数&lt;br&gt;3.num.toFixed(2); 给数字保留两位小数，但是他不是四舍五入的，而是根据四舍六入五取偶（又称四舍六入五留双）法则保留位数的。简单来说就是：四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。&lt;br&gt;&lt;font color=&quot;red&quot;&gt;综上：给数字保留N位小数并且最后一位四舍五入的方法为 &lt;/font&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(Math.round(num * 10^N) &amp;#x2F; 10^N).toFixed(N);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.将字符串转换为数字的方法&lt;br&gt;parseInt() 转换为整数&lt;br&gt;parseFloat() 转换为浮点数&lt;/p&gt;
&lt;h1 id=&quot;2-字符与ASCII码的相互转化&quot;&gt;&lt;a href=&quot;#2-字符与ASCII码的相互转化&quot; class=&quot;headerlink&quot; title=&quot;2.字符与ASCII码的相互转化&quot;&gt;&lt;/a&gt;2.字符与ASCII码的相互转化&lt;/h1&gt;&lt;p&gt;String.fromCharCode(ASCII码); 输出ASCII码对应字符&lt;/p&gt;
&lt;p&gt;var str = ‘c’;&lt;br&gt;str.charCodeAt(); 输出字符对应ASCII码&lt;/p&gt;
&lt;h2 id=&quot;大写字母转小写&quot;&gt;&lt;a href=&quot;#大写字母转小写&quot; class=&quot;headerlink&quot; title=&quot;大写字母转小写&quot;&gt;&lt;/a&gt;大写字母转小写&lt;/h2&gt;&lt;p&gt;&lt;code&gt;String.fromCharCode(&amp;#39;c&amp;#39;.charCodeAt()+32)&lt;/code&gt; // c –&amp;gt; C&lt;/p&gt;
&lt;h1 id=&quot;3-反转字符串&quot;&gt;&lt;a href=&quot;#3-反转字符串&quot; class=&quot;headerlink&quot; title=&quot;3. 反转字符串&quot;&gt;&lt;/a&gt;3. 反转字符串&lt;/h1&gt;&lt;p&gt;1.将字符串变成数组var array = str.split(‘’)&lt;br&gt;2.将数组元素反转var rearray = array.reverse()—-输出还是数组&lt;br&gt;3.将数组转化为字符串rearray.join(‘’)完成字符串反转&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程题" scheme="https://jihuistudy.github.io/categories/%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
    
      <category term="算法" scheme="https://jihuistudy.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS进制转换</title>
    <link href="https://jihuistudy.github.io/2020/09/13/JS%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>https://jihuistudy.github.io/2020/09/13/JS%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-09-13T05:21:23.000Z</published>
    <updated>2020-09-13T06:11:53.377Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;十进制转其他进制，数组转字符串&quot;&gt;&lt;a href=&quot;#十进制转其他进制，数组转字符串&quot; class=&quot;headerlink&quot; title=&quot;十进制转其他进制，数组转字符串&quot;&gt;&lt;/a&gt;十进制转其他进制，数组转字符串&lt;/h1&gt;&lt;figure
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>数组常用API与分类</title>
    <link href="https://jihuistudy.github.io/2020/09/11/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8API%E4%B8%8E%E5%88%86%E7%B1%BB/"/>
    <id>https://jihuistudy.github.io/2020/09/11/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8API%E4%B8%8E%E5%88%86%E7%B1%BB/</id>
    <published>2020-09-11T13:31:11.000Z</published>
    <updated>2020-09-13T05:36:59.878Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数组迭代器&quot;&gt;&lt;a href=&quot;#数组迭代器&quot; class=&quot;headerlink&quot; title=&quot;数组迭代器&quot;&gt;&lt;/a&gt;数组迭代器&lt;/h1&gt;&lt;p&gt;arr.keys()返回索引值迭代器;&lt;br&gt;arr.values()返回元素值迭代器;&lt;br&gt;arr.entries()返回键值对。&lt;/p&gt;
&lt;h1 id=&quot;遍历数组的数组API&quot;&gt;&lt;a href=&quot;#遍历数组的数组API&quot; class=&quot;headerlink&quot; title=&quot;遍历数组的数组API&quot;&gt;&lt;/a&gt;遍历数组的数组API&lt;/h1&gt;&lt;h2 id=&quot;1-forEach遍历数组所有元素&quot;&gt;&lt;a href=&quot;#1-forEach遍历数组所有元素&quot; class=&quot;headerlink&quot; title=&quot;1.forEach遍历数组所有元素&quot;&gt;&lt;/a&gt;1.forEach遍历数组所有元素&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr &amp;#x3D; [1,2,3,4,5];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.forEach(function (item,index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(index,item)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出： 0 1; 1 2; 2 3; 3 4; 4 5;&lt;/p&gt;
&lt;h2 id=&quot;2-every用来判断所有的数组元素是否都符合条件，有一个元素不符合条件就返回false&quot;&gt;&lt;a href=&quot;#2-every用来判断所有的数组元素是否都符合条件，有一个元素不符合条件就返回false&quot; class=&quot;headerlink&quot; title=&quot;2.every用来判断所有的数组元素是否都符合条件，有一个元素不符合条件就返回false&quot;&gt;&lt;/a&gt;2.every用来判断所有的数组元素是否都符合条件，有一个元素不符合条件就返回false&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr &amp;#x3D; [1,2,3,4,5];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.every(function (item,index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if(item &amp;lt; 4) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：false&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
      <category term="数组" scheme="https://jihuistudy.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>创建对象的几种方式</title>
    <link href="https://jihuistudy.github.io/2020/09/08/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://jihuistudy.github.io/2020/09/08/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-09-08T13:23:49.000Z</published>
    <updated>2020-09-08T14:27:06.340Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一共有6种创建对象的方式&lt;/p&gt;
&lt;h1 id=&quot;1-Object构造函数生成&quot;&gt;&lt;a href=&quot;#1-Object构造函数生成&quot; class=&quot;headerlink&quot; title=&quot;1. Object构造函数生成&quot;&gt;&lt;/a&gt;1. Object构造函数生成&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj &amp;#x3D; new Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.属性 &amp;#x3D; 属性值;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.方法 &amp;#x3D; function(str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	方法代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Object是所有对象的基类，根，所有的JavaScript对象都是由Object延伸的&lt;/p&gt;
&lt;h1 id=&quot;2-对象字面量生成&quot;&gt;&lt;a href=&quot;#2-对象字面量生成&quot; class=&quot;headerlink&quot; title=&quot;2. 对象字面量生成&quot;&gt;&lt;/a&gt;2. 对象字面量生成&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj &amp;#x3D; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	属性名称:属性值,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	方法名称:function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>继承详解</title>
    <link href="https://jihuistudy.github.io/2020/09/07/%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/"/>
    <id>https://jihuistudy.github.io/2020/09/07/%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-09-07T14:10:21.000Z</published>
    <updated>2020-09-11T13:03:42.539Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;继承的原理&quot;&gt;&lt;a href=&quot;#继承的原理&quot; class=&quot;headerlink&quot; title=&quot;继承的原理&quot;&gt;&lt;/a&gt;继承的原理&lt;/h1&gt;&lt;p&gt;与原型和原型链有关。每个函数都有个原型对象，这个对象用来存储通过这个函数所创建的所有实例的共有属性和方法。在读取某个对象属性的时候，从实例开始，如果实例有就返回，如果没有就找原型对象，找到了就返回。通过实例只能访问原型对象里的值，但是不能修改，这就实现了继承。通过继承可以使子类的实例使用在父类中定义的属性和方法。&lt;/p&gt;
&lt;h1 id=&quot;继承的几种方式&quot;&gt;&lt;a href=&quot;#继承的几种方式&quot; class=&quot;headerlink&quot; title=&quot;继承的几种方式&quot;&gt;&lt;/a&gt;继承的几种方式&lt;/h1&gt;&lt;h2 id=&quot;1-原型链继承&quot;&gt;&lt;a href=&quot;#1-原型链继承&quot; class=&quot;headerlink&quot; title=&quot;1.原型链继承&quot;&gt;&lt;/a&gt;1.原型链继承&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Parent1() &amp;#123; &amp;#x2F;&amp;#x2F; 父类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.name &amp;#x3D; &amp;#39;parent1&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.sum &amp;#x3D; function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		alert(this.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Parent1.prototype.age &amp;#x3D; 50;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var p1 &amp;#x3D; new Parent1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p1.sex &amp;#x3D; &amp;#39;man&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function Child1() &amp;#123; &amp;#x2F;&amp;#x2F; 子类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	this.type &amp;#x3D; &amp;#39;child1&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Child1.prototype &amp;#x3D; new Parent1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var c1 &amp;#x3D; new Child1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(c1.name); &amp;#x2F;&amp;#x2F; &amp;#39;parent1&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(c1.age); &amp;#x2F;&amp;#x2F; 50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(c1 instanceof Parent1); &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(c1.sex); &amp;#x2F;&amp;#x2F; undefined 新实例不会继承父类实例的属性！&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;重点：&lt;br&gt;让新实例的原型等于父类的实例。&lt;br&gt;特点：&lt;br&gt;1、实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！）&lt;br&gt;缺点：&lt;br&gt;1、新实例无法向父类构造函数传参。&lt;br&gt;2、继承单一。&lt;br&gt;3、所有新实例都会共享父类实例的属性。（原型链中的原型对象是共用的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS的垃圾回收机制</title>
    <link href="https://jihuistudy.github.io/2020/09/07/JS%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://jihuistudy.github.io/2020/09/07/JS%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2020-09-07T02:36:08.000Z</published>
    <updated>2020-09-09T00:54:02.824Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是垃圾回收机制？&quot;&gt;&lt;a href=&quot;#什么是垃圾回收机制？&quot; class=&quot;headerlink&quot; title=&quot;什么是垃圾回收机制？&quot;&gt;&lt;/a&gt;什么是垃圾回收机制？&lt;/h1&gt;&lt;p&gt;释放无用的数据，回收内存，会按照固定的时间间隔周期性的执行。&lt;/p&gt;
&lt;h1 id=&quot;JS中常见的垃圾回收方式是标记清除和引用技术&quot;&gt;&lt;a href=&quot;#JS中常见的垃圾回收方式是标记清除和引用技术&quot; class=&quot;headerlink&quot; title=&quot;JS中常见的垃圾回收方式是标记清除和引用技术&quot;&gt;&lt;/a&gt;JS中常见的垃圾回收方式是标记清除和引用技术&lt;/h1&gt;&lt;h2 id=&quot;标记清除&quot;&gt;&lt;a href=&quot;#标记清除&quot; class=&quot;headerlink&quot; title=&quot;标记清除&quot;&gt;&lt;/a&gt;标记清除&lt;/h2&gt;&lt;h3 id=&quot;工作原理&quot;&gt;&lt;a href=&quot;#工作原理&quot; class=&quot;headerlink&quot; title=&quot;工作原理&quot;&gt;&lt;/a&gt;工作原理&lt;/h3&gt;&lt;p&gt;是当变量进入环境时（函数中声明一个临时变量），将这个变量标记为“进入环境”。当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的变量就被回收内存。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function test()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var a &amp;#x3D; 10;    &amp;#x2F;&amp;#x2F;被标记&amp;quot;进入环境&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var b &amp;#x3D; &amp;quot;hello&amp;quot;;    &amp;#x2F;&amp;#x2F;被标记&amp;quot;进入环境&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test();    &amp;#x2F;&amp;#x2F;执行完毕后之后，a和b又被标记&amp;quot;离开环境&amp;quot;，被回收&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;工作流程&quot;&gt;&lt;a href=&quot;#工作流程&quot; class=&quot;headerlink&quot; title=&quot;工作流程&quot;&gt;&lt;/a&gt;工作流程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;垃圾回收机制在运行的时候会给存储在内存中的所有变量都加上标记（可以是任何标记方式）&lt;/li&gt;
&lt;li&gt;去掉处在环境中的变量和被环境中变量引用的变量（闭包）的标记&lt;/li&gt;
&lt;li&gt;在此之后剩下的带有标记的变量被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了&lt;/li&gt;
&lt;li&gt;最后垃圾回收机制到下一个周期运行时，将释放这些带有标记的变量的内存，回收它们所占用的空间&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>原型，原型链与instanceof</title>
    <link href="https://jihuistudy.github.io/2020/09/06/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://jihuistudy.github.io/2020/09/06/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-09-06T14:01:54.000Z</published>
    <updated>2020-09-10T13:52:17.634Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;使用构造函数创建对象&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Person() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype.name &amp;#x3D; &amp;#39;Kevin&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var person &amp;#x3D; new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(person.name) &amp;#x2F;&amp;#x2F; Kevin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person&lt;/p&gt;
&lt;h1 id=&quot;什么是原型？&quot;&gt;&lt;a href=&quot;#什么是原型？&quot; class=&quot;headerlink&quot; title=&quot;什么是原型？&quot;&gt;&lt;/a&gt;什么是原型？&lt;/h1&gt;&lt;p&gt;每个声明的函数（对象）（Person）都有一个prototype属性，这个属性引用了一个对象，即原型对象，也简称原型。原型对象带有constructor属性，constructor属性指向这个原型对象所在的函数（即声明的函数Person）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype.constructor &amp;#x3D;&amp;#x3D; Person &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;用constructor属性来判断某实例对象是否是某构造函数直接生成的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;person.__proto__.constructor &amp;#x3D;&amp;#x3D; Person &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.__proto__.constructor &amp;#x3D;&amp;#x3D; Object &amp;#x2F;&amp;#x2F; false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型是利用prototype属性给函数对象添加属性和方法。&lt;/p&gt;
&lt;h1 id=&quot;什么是原型链？&quot;&gt;&lt;a href=&quot;#什么是原型链？&quot; class=&quot;headerlink&quot; title=&quot;什么是原型链？&quot;&gt;&lt;/a&gt;什么是原型链？&lt;/h1&gt;&lt;p&gt;JS在创建对象（不论是普通对象还是函数对象）（person）的时候，都有一个叫做&lt;strong&gt;proto&lt;/strong&gt;的内置属性，用于指向它的构造函数（Person）的prototype属性。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;person.__proto__ &amp;#x3D;&amp;#x3D; Person.prototype &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>几个令人费解却有趣的隐式转换</title>
    <link href="https://jihuistudy.github.io/2020/09/06/%E5%87%A0%E4%B8%AA%E4%BB%A4%E4%BA%BA%E8%B4%B9%E8%A7%A3%E5%8D%B4%E6%9C%89%E8%B6%A3%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>https://jihuistudy.github.io/2020/09/06/%E5%87%A0%E4%B8%AA%E4%BB%A4%E4%BA%BA%E8%B4%B9%E8%A7%A3%E5%8D%B4%E6%9C%89%E8%B6%A3%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-09-06T08:38:00.000Z</published>
    <updated>2020-09-06T14:33:21.238Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对于三个令人匪夷所思的答案&quot;&gt;&lt;a href=&quot;#对于三个令人匪夷所思的答案&quot; class=&quot;headerlink&quot; title=&quot;对于三个令人匪夷所思的答案&quot;&gt;&lt;/a&gt;对于三个令人匪夷所思的答案&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#39;true&amp;#39; &amp;#x3D;&amp;#x3D; true &amp;#x2F;&amp;#x2F; false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125; &amp;#x3D;&amp;#x3D; !&amp;#123;&amp;#125; &amp;#x2F;&amp;#x2F; false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[] &amp;#x3D;&amp;#x3D; ![] &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;对于’true’-true的解释&quot;&gt;&lt;a href=&quot;#对于’true’-true的解释&quot; class=&quot;headerlink&quot; title=&quot;对于’true’ == true的解释&quot;&gt;&lt;/a&gt;对于’true’ == true的解释&lt;/h1&gt;&lt;h2 id=&quot;相等操作符&quot;&gt;&lt;a href=&quot;#相等操作符&quot; class=&quot;headerlink&quot; title=&quot;相等操作符&quot;&gt;&lt;/a&gt;相等操作符&lt;/h2&gt;&lt;p&gt;在转换不同的数据类型时，相等和不相等操作符遵循下列基本规则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false转换为0，而true转换为1；&lt;/li&gt;
&lt;li&gt;如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；&lt;/li&gt;
&lt;li&gt;如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf()方法，用得到的基本类型值按照前面的两条规则进行比较；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先 ‘true’ == true 符合规则1，这样就转化成了对 &lt;code&gt;&amp;#39;true&amp;#39; == 1&lt;/code&gt;进行求值，’true’ == 1 表达式符合规则2——如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；&lt;br&gt;也就是说需要将 ‘true’ 转换成数值之后，再与数字 1 进行比较。把 ‘true’ 转换成数值是使用 Number 函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
</feed>

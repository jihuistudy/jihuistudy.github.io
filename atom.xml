<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>纪惠de博客</title>
  <icon>https://jihuistudy.github.io/icon.png</icon>
  <subtitle>每一篇文件都是我成长的见证</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jihuistudy.github.io/"/>
  <updated>2020-09-08T14:27:06.340Z</updated>
  <id>https://jihuistudy.github.io/</id>
  
  <author>
    <name>纪惠</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建对象的几种方式</title>
    <link href="https://jihuistudy.github.io/2020/09/08/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://jihuistudy.github.io/2020/09/08/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-09-08T13:23:49.000Z</published>
    <updated>2020-09-08T14:27:06.340Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;一共有6种创建对象的方式&lt;/p&gt;
&lt;h1 id=&quot;1-Object构造函数生成&quot;&gt;&lt;a href=&quot;#1-Object构造函数生成&quot; class=&quot;headerlink&quot; title=&quot;1. Object构造函数生成&quot;&gt;&lt;/a&gt;1. Object构造函数生成&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj &amp;#x3D; new Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.属性 &amp;#x3D; 属性值;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.方法 &amp;#x3D; function(str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	方法代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Object是所有对象的基类，根，所有的JavaScript对象都是由Object延伸的&lt;/p&gt;
&lt;h1 id=&quot;2-对象字面量生成&quot;&gt;&lt;a href=&quot;#2-对象字面量生成&quot; class=&quot;headerlink&quot; title=&quot;2. 对象字面量生成&quot;&gt;&lt;/a&gt;2. 对象字面量生成&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj &amp;#x3D; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	属性名称:属性值,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	方法名称:function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>继承详解</title>
    <link href="https://jihuistudy.github.io/2020/09/07/%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/"/>
    <id>https://jihuistudy.github.io/2020/09/07/%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-09-07T14:10:21.000Z</published>
    <updated>2020-09-10T14:33:54.439Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;继承的原理&quot;&gt;&lt;a href=&quot;#继承的原理&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS的垃圾回收机制</title>
    <link href="https://jihuistudy.github.io/2020/09/07/JS%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://jihuistudy.github.io/2020/09/07/JS%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2020-09-07T02:36:08.000Z</published>
    <updated>2020-09-09T00:54:02.824Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是垃圾回收机制？&quot;&gt;&lt;a href=&quot;#什么是垃圾回收机制？&quot; class=&quot;headerlink&quot; title=&quot;什么是垃圾回收机制？&quot;&gt;&lt;/a&gt;什么是垃圾回收机制？&lt;/h1&gt;&lt;p&gt;释放无用的数据，回收内存，会按照固定的时间间隔周期性的执行。&lt;/p&gt;
&lt;h1 id=&quot;JS中常见的垃圾回收方式是标记清除和引用技术&quot;&gt;&lt;a href=&quot;#JS中常见的垃圾回收方式是标记清除和引用技术&quot; class=&quot;headerlink&quot; title=&quot;JS中常见的垃圾回收方式是标记清除和引用技术&quot;&gt;&lt;/a&gt;JS中常见的垃圾回收方式是标记清除和引用技术&lt;/h1&gt;&lt;h2 id=&quot;标记清除&quot;&gt;&lt;a href=&quot;#标记清除&quot; class=&quot;headerlink&quot; title=&quot;标记清除&quot;&gt;&lt;/a&gt;标记清除&lt;/h2&gt;&lt;h3 id=&quot;工作原理&quot;&gt;&lt;a href=&quot;#工作原理&quot; class=&quot;headerlink&quot; title=&quot;工作原理&quot;&gt;&lt;/a&gt;工作原理&lt;/h3&gt;&lt;p&gt;是当变量进入环境时（函数中声明一个临时变量），将这个变量标记为“进入环境”。当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的变量就被回收内存。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function test()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var a &amp;#x3D; 10;    &amp;#x2F;&amp;#x2F;被标记&amp;quot;进入环境&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var b &amp;#x3D; &amp;quot;hello&amp;quot;;    &amp;#x2F;&amp;#x2F;被标记&amp;quot;进入环境&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test();    &amp;#x2F;&amp;#x2F;执行完毕后之后，a和b又被标记&amp;quot;离开环境&amp;quot;，被回收&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;工作流程&quot;&gt;&lt;a href=&quot;#工作流程&quot; class=&quot;headerlink&quot; title=&quot;工作流程&quot;&gt;&lt;/a&gt;工作流程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;垃圾回收机制在运行的时候会给存储在内存中的所有变量都加上标记（可以是任何标记方式）&lt;/li&gt;
&lt;li&gt;去掉处在环境中的变量和被环境中变量引用的变量（闭包）的标记&lt;/li&gt;
&lt;li&gt;在此之后剩下的带有标记的变量被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了&lt;/li&gt;
&lt;li&gt;最后垃圾回收机制到下一个周期运行时，将释放这些带有标记的变量的内存，回收它们所占用的空间&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>原型，原型链与instanceof</title>
    <link href="https://jihuistudy.github.io/2020/09/06/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://jihuistudy.github.io/2020/09/06/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-09-06T14:01:54.000Z</published>
    <updated>2020-09-10T13:52:17.634Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;使用构造函数创建对象&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Person() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype.name &amp;#x3D; &amp;#39;Kevin&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var person &amp;#x3D; new Person();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(person.name) &amp;#x2F;&amp;#x2F; Kevin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person&lt;/p&gt;
&lt;h1 id=&quot;什么是原型？&quot;&gt;&lt;a href=&quot;#什么是原型？&quot; class=&quot;headerlink&quot; title=&quot;什么是原型？&quot;&gt;&lt;/a&gt;什么是原型？&lt;/h1&gt;&lt;p&gt;每个声明的函数（对象）（Person）都有一个prototype属性，这个属性引用了一个对象，即原型对象，也简称原型。原型对象带有constructor属性，constructor属性指向这个原型对象所在的函数（即声明的函数Person）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype.constructor &amp;#x3D;&amp;#x3D; Person &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;用constructor属性来判断某实例对象是否是某构造函数直接生成的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;person.__proto__.constructor &amp;#x3D;&amp;#x3D; Person &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.__proto__.constructor &amp;#x3D;&amp;#x3D; Object &amp;#x2F;&amp;#x2F; false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型是利用prototype属性给函数对象添加属性和方法。&lt;/p&gt;
&lt;h1 id=&quot;什么是原型链？&quot;&gt;&lt;a href=&quot;#什么是原型链？&quot; class=&quot;headerlink&quot; title=&quot;什么是原型链？&quot;&gt;&lt;/a&gt;什么是原型链？&lt;/h1&gt;&lt;p&gt;JS在创建对象（不论是普通对象还是函数对象）（person）的时候，都有一个叫做&lt;strong&gt;proto&lt;/strong&gt;的内置属性，用于指向它的构造函数（Person）的prototype属性。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;person.__proto__ &amp;#x3D;&amp;#x3D; Person.prototype &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>几个令人费解却有趣的隐式转换</title>
    <link href="https://jihuistudy.github.io/2020/09/06/%E5%87%A0%E4%B8%AA%E4%BB%A4%E4%BA%BA%E8%B4%B9%E8%A7%A3%E5%8D%B4%E6%9C%89%E8%B6%A3%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <id>https://jihuistudy.github.io/2020/09/06/%E5%87%A0%E4%B8%AA%E4%BB%A4%E4%BA%BA%E8%B4%B9%E8%A7%A3%E5%8D%B4%E6%9C%89%E8%B6%A3%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-09-06T08:38:00.000Z</published>
    <updated>2020-09-06T11:56:17.893Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对于三个令人匪夷所思的答案&quot;&gt;&lt;a href=&quot;#对于三个令人匪夷所思的答案&quot; class=&quot;headerlink&quot; title=&quot;对于三个令人匪夷所思的答案&quot;&gt;&lt;/a&gt;对于三个令人匪夷所思的答案&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#39;true&amp;#39; &amp;#x3D;&amp;#x3D; true &amp;#x2F;&amp;#x2F; false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#125; &amp;#x3D;&amp;#x3D; !&amp;#123;&amp;#125; &amp;#x2F;&amp;#x2F; false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[] &amp;#x3D;&amp;#x3D; ![] &amp;#x2F;&amp;#x2F; true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;对于’true’-true的解释&quot;&gt;&lt;a href=&quot;#对于’true’-true的解释&quot; class=&quot;headerlink&quot; title=&quot;对于’true’ == true的解释&quot;&gt;&lt;/a&gt;对于’true’ == true的解释&lt;/h1&gt;&lt;h2 id=&quot;相等操作符&quot;&gt;&lt;a href=&quot;#相等操作符&quot; class=&quot;headerlink&quot; title=&quot;相等操作符&quot;&gt;&lt;/a&gt;相等操作符&lt;/h2&gt;&lt;p&gt;在转换不同的数据类型时，相等和不相等操作符遵循下列基本规则：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false转换为0，而true转换为1；&lt;/li&gt;
&lt;li&gt;如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；&lt;/li&gt;
&lt;li&gt;如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf()方法，用得到的基本类型值按照前面的两条规则进行比较；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先 ‘true’ == true 符合规则1，这样就转化成了对 &lt;code&gt;&amp;#39;true&amp;#39; == 1&lt;/code&gt;进行求值，’true’ == 1 表达式符合规则2——如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；&lt;br&gt;也就是说需要将 ‘true’ 转换成数值之后，再与数字 1 进行比较。把 ‘true’ 转换成数值是使用 Number 函数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="https://jihuistudy.github.io/2020/09/05/%E9%97%AD%E5%8C%85/"/>
    <id>https://jihuistudy.github.io/2020/09/05/%E9%97%AD%E5%8C%85/</id>
    <published>2020-09-05T12:00:47.000Z</published>
    <updated>2020-09-06T12:17:32.510Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是闭包？&quot;&gt;&lt;a href=&quot;#什么是闭包？&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包？&quot;&gt;&lt;/a&gt;什么是闭包？&lt;/h1&gt;&lt;p&gt;闭包就是能够读取其他函数内部变量的函数&lt;/p&gt;
&lt;h1 id=&quot;闭包的特性&quot;&gt;&lt;a href=&quot;#闭包的特性&quot; class=&quot;headerlink&quot; title=&quot;闭包的特性&quot;&gt;&lt;/a&gt;闭包的特性&lt;/h1&gt;&lt;p&gt;函数内再嵌套函数&lt;br&gt;可以读取其他函数参数和变量&lt;br&gt;参数和变量不会被垃圾回收机制回收&lt;/p&gt;
&lt;h1 id=&quot;闭包的优缺点&quot;&gt;&lt;a href=&quot;#闭包的优缺点&quot; class=&quot;headerlink&quot; title=&quot;闭包的优缺点&quot;&gt;&lt;/a&gt;闭包的优缺点&lt;/h1&gt;&lt;p&gt;优点：可以避免全局变量的污染，能够实现封装和缓存等&lt;br&gt;缺点：消耗内存、不正当使用会造成内存溢出的问题&lt;/p&gt;
&lt;h1 id=&quot;闭包的形成跟变量的作用域以及变量的生存周期密切相关&quot;&gt;&lt;a href=&quot;#闭包的形成跟变量的作用域以及变量的生存周期密切相关&quot; class=&quot;headerlink&quot; title=&quot;闭包的形成跟变量的作用域以及变量的生存周期密切相关&quot;&gt;&lt;/a&gt;闭包的形成跟变量的作用域以及变量的生存周期密切相关&lt;/h1&gt;&lt;h2 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=&quot;变量作用域&quot;&gt;&lt;/a&gt;变量作用域&lt;/h2&gt;&lt;p&gt;作用域分为全局作用域和局部作用域。&lt;br&gt;函数内部可访问全局变量。&lt;br&gt;函数外却不可以访问函数内的变量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝与浅拷贝</title>
    <link href="https://jihuistudy.github.io/2020/09/05/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://jihuistudy.github.io/2020/09/05/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2020-09-05T06:59:37.000Z</published>
    <updated>2020-09-05T12:43:51.572Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是浅拷贝？什么是深拷贝？&quot;&gt;&lt;a href=&quot;#什么是浅拷贝？什么是深拷贝？&quot; class=&quot;headerlink&quot; title=&quot;什么是浅拷贝？什么是深拷贝？&quot;&gt;&lt;/a&gt;什么是浅拷贝？什么是深拷贝？&lt;/h1&gt;&lt;p&gt;-浅拷贝是指只拷贝最外面一层，深层次对象级别就只拷贝引用；&lt;br&gt;-深拷贝是每一层的数据都会拷贝。&lt;br&gt;简单来说就是浅拷贝的时候如果第一层数据是基本数据类型，那么就如同直接赋值那样，会拷贝其本身；&lt;br&gt;如果第一层数据除了基本数据之外还有一层的对象，那么对于浅拷贝来说，就只能拷贝其引用。那当原对象的值发生了变化，那么这个结果不光会反映到原对象上，也会反映到拷贝的对象上。&lt;br&gt;但是深拷贝就不一样，即使有嵌套关系依然会全部的拷贝出来，原对象和拷贝对象互相独立。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let a &amp;#x3D; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	age: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let b &amp;#x3D; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.age &amp;#x3D; 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(b.age); &amp;#x2F;&amp;#x2F; 输出2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从上述例子中我们可以发现，如果给一个变量赋值一个对象，那么两者的值引用同一个内存地址，其中一方改变，另一方也会改变。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://jihuistudy.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>前端复习企划5-JS</title>
    <link href="https://jihuistudy.github.io/2020/09/05/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E4%BC%81%E5%88%925-JS/"/>
    <id>https://jihuistudy.github.io/2020/09/05/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E4%BC%81%E5%88%925-JS/</id>
    <published>2020-09-05T05:37:44.000Z</published>
    <updated>2020-09-09T00:55:47.352Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS&quot;&gt;&lt;a href=&quot;#JS&quot; class=&quot;headerlink&quot; title=&quot;JS&quot;&gt;&lt;/a&gt;JS&lt;/h1&gt;&lt;h2 id=&quot;1-JS的基本数据类型，引用数据类型，typeof运算符&quot;&gt;&lt;a href=&quot;#1-JS的基本数据类型，引用数据类型，typeof运算符&quot; class=&quot;headerlink&quot; title=&quot;1.JS的基本数据类型，引用数据类型，typeof运算符&quot;&gt;&lt;/a&gt;1.JS的基本数据类型，引用数据类型，typeof运算符&lt;/h2&gt;&lt;p&gt;-保存基本数据类型的变量保存的是值本身，保存引用类型的变量保存的并不是对象本身，而是一个指向该对象的引用地址。&lt;br&gt;-基本数据类型的值会把本身保存在栈中，引用类型保存在栈中的是引用地址，内容会存放在堆内存中。&lt;br&gt;-引用类型数据赋值，赋的是引用地址，所以被赋值的对象b以及原对象a的引用地址一样，该引用地址所对应的内容会共享。&lt;br&gt;-如果原对象a被重新赋值，a会改变地址，在堆内存中开辟一个新的空间，被赋值的对象b的地址与被重新赋值的对象a不一样了，所以改变a的值不会影响b。&lt;/p&gt;
&lt;h2 id=&quot;2-JS的变量计算-强制类型转换&quot;&gt;&lt;a href=&quot;#2-JS的变量计算-强制类型转换&quot; class=&quot;headerlink&quot; title=&quot;2.JS的变量计算-强制类型转换&quot;&gt;&lt;/a&gt;2.JS的变量计算-强制类型转换&lt;/h2&gt;&lt;p&gt;字符串拼接，==运算符，if语句，逻辑运算&lt;/p&gt;
&lt;h2 id=&quot;3-JS中有哪些内置函数——数据封装类对象&quot;&gt;&lt;a href=&quot;#3-JS中有哪些内置函数——数据封装类对象&quot; class=&quot;headerlink&quot; title=&quot;3.JS中有哪些内置函数——数据封装类对象&quot;&gt;&lt;/a&gt;3.JS中有哪些内置函数——数据封装类对象&lt;/h2&gt;&lt;p&gt;Object/Array/Boolean/Number/String/Function/Date/RegExp/Error&lt;/p&gt;
&lt;h2 id=&quot;4-this的不同应用场景，如何取值&quot;&gt;&lt;a href=&quot;#4-this的不同应用场景，如何取值&quot; class=&quot;headerlink&quot; title=&quot;4.this的不同应用场景，如何取值&quot;&gt;&lt;/a&gt;4.this的不同应用场景，如何取值&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当作普通函数被调用(即函数独立调用时) —— 返回window&lt;/li&gt;
&lt;li&gt;使用call，apply，bind的时候 —— 第一个参数传入什么值就指向什么值，如果第一个参数为空，那么就指向window。call和apply的使用可以直接执行函数，bind要返回一个新的函数执行。&lt;/li&gt;
&lt;li&gt;作为对象方法调用 —— 返回对象本身&lt;/li&gt;
&lt;li&gt;在class的方法中调用 —— 返回当前实例本身&lt;/li&gt;
&lt;li&gt;箭头函数 —— 箭头函数其实是没有this的，找上级作用域的this值返回，或包裹箭头函数的第一个普通函数的 this。另外对箭头函数使用bind这类函数是无效的。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>BFC详解</title>
    <link href="https://jihuistudy.github.io/2020/09/04/BFC%E8%AF%A6%E8%A7%A3/"/>
    <id>https://jihuistudy.github.io/2020/09/04/BFC%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-09-04T08:45:54.000Z</published>
    <updated>2020-09-05T01:54:35.059Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是BFC？&quot;&gt;&lt;a href=&quot;#什么是BFC？&quot; class=&quot;headerlink&quot; title=&quot;什么是BFC？&quot;&gt;&lt;/a&gt;什么是BFC？&lt;/h1&gt;&lt;p&gt;BFC(Block Formatting Context)，块级格式化上下文，是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。&lt;/p&gt;
&lt;h1 id=&quot;如何创建BFC？&quot;&gt;&lt;a href=&quot;#如何创建BFC？&quot; class=&quot;headerlink&quot; title=&quot;如何创建BFC？&quot;&gt;&lt;/a&gt;如何创建BFC？&lt;/h1&gt;&lt;p&gt;给元素设置以下之一属性就可以创建BFC&lt;br&gt;1、float的值不是none&lt;br&gt;2、position的值不是static或者relative&lt;br&gt;3、display的值是inline-block、table-cell、flex、table-caption或者inline-flex&lt;br&gt;4、overflow的值不是visible(overflow:visible)&lt;/p&gt;
&lt;h1 id=&quot;BFC布局规则有？&quot;&gt;&lt;a href=&quot;#BFC布局规则有？&quot; class=&quot;headerlink&quot; title=&quot;BFC布局规则有？&quot;&gt;&lt;/a&gt;BFC布局规则有？&lt;/h1&gt;&lt;p&gt;-当父级元素触发了BFC时，浮动的子元素会被父级元素计算高度——可以解决父元素高度塌陷的问题&lt;br&gt;-当非浮动元素触发了BFC时，非浮动元素不会覆盖浮动元素的位置——可以解决自适应两栏布局内容溢出的问题&lt;br&gt;-当父级触发BFC时，子元素的上下外边距margin不会和父元素的上下margin重叠，但是属于同一个BFC的两个相邻的子元素的上下margin会重叠——可以解决相邻两个元素的上下margin重叠的问题&lt;br&gt;-BFC容器内与容器外互不影响&lt;br&gt;-BFC内部的子元素（不管是内联/内联块/块状元素都会单独占一行）会在垂直方向，一个接一个地放置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="CSS" scheme="https://jihuistudy.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>重排与重绘详解</title>
    <link href="https://jihuistudy.github.io/2020/09/04/%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E8%AF%A6%E8%A7%A3/"/>
    <id>https://jihuistudy.github.io/2020/09/04/%E9%87%8D%E6%8E%92%E4%B8%8E%E9%87%8D%E7%BB%98%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-09-04T07:59:08.000Z</published>
    <updated>2020-09-04T14:32:28.813Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML渲染过程：&quot;&gt;&lt;a href=&quot;#HTML渲染过程：&quot; class=&quot;headerlink&quot; title=&quot;HTML渲染过程：&quot;&gt;&lt;/a&gt;HTML渲染过程：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;HTML被HTML解析器解析成DOM Tree, css则被css解析器解析成CSSOM Tree。&lt;/li&gt;
&lt;li&gt;DOM Tree和CSSOM Tree解析完成后，被附加到一起，形成渲染树（Render Tree）。&lt;/li&gt;
&lt;li&gt;即根据渲染树计算每个节点的几何信息(重排)。&lt;/li&gt;
&lt;li&gt;根据计算好的信息绘制整个页面,这个过程被叫做重绘。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;重排&quot;&gt;&lt;a href=&quot;#重排&quot; class=&quot;headerlink&quot; title=&quot;重排&quot;&gt;&lt;/a&gt;重排&lt;/h1&gt;&lt;h2 id=&quot;什么是重排&quot;&gt;&lt;a href=&quot;#什么是重排&quot; class=&quot;headerlink&quot; title=&quot;什么是重排?&quot;&gt;&lt;/a&gt;什么是重排?&lt;/h2&gt;&lt;p&gt;由于浏览器渲染界面是基于流式布局模型的，也就是某一个DOM节点信息更改了，就需要对DOM结构进行重新计算，重新布局界面，引发重排。&lt;/p&gt;
&lt;p&gt;-当元素脱离文档流时(有position:absolute;或position:fixed;属性的元素)，不会引起重排。&lt;br&gt;-当有position:relative;或position:static;属性的元素会引起重排。&lt;/p&gt;
&lt;h2 id=&quot;引起重排的操作有哪些？&quot;&gt;&lt;a href=&quot;#引起重排的操作有哪些？&quot; class=&quot;headerlink&quot; title=&quot;引起重排的操作有哪些？&quot;&gt;&lt;/a&gt;引起重排的操作有哪些？&lt;/h2&gt;&lt;p&gt;页面首次渲染&lt;br&gt;浏览器窗口大小发生改变&lt;br&gt;元素尺寸或位置发生改变&lt;br&gt;元素内容变化（文字数量或图片大小等等）&lt;br&gt;元素字体大小变化&lt;br&gt;添加或者删除可见的DOM元素&lt;br&gt;激活CSS伪类（例:hover）&lt;br&gt;查询某些属性或调用某些方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="CSS" scheme="https://jihuistudy.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>居中对齐的实现方式总结</title>
    <link href="https://jihuistudy.github.io/2020/09/03/%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://jihuistudy.github.io/2020/09/03/%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</id>
    <published>2020-09-03T06:46:40.000Z</published>
    <updated>2020-09-05T02:04:25.198Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何实现水平居中&quot;&gt;&lt;a href=&quot;#如何实现水平居中&quot; class=&quot;headerlink&quot; title=&quot;如何实现水平居中&quot;&gt;&lt;/a&gt;如何实现水平居中&lt;/h1&gt;&lt;h2 id=&quot;方法1：针对固定宽度的块状元素，使用margin-0-auto-实现水平居中&quot;&gt;&lt;a href=&quot;#方法1：针对固定宽度的块状元素，使用margin-0-auto-实现水平居中&quot; class=&quot;headerlink&quot; title=&quot;方法1：针对固定宽度的块状元素，使用margin:0 auto;实现水平居中&quot;&gt;&lt;/a&gt;方法1：针对固定宽度的块状元素，使用margin:0 auto;实现水平居中&lt;/h2&gt;&lt;h3 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width:100px; &amp;#x2F;*width可以固定px也可以使用百分比*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	margin:0 auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background-color:red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class&amp;#x3D;&amp;quot;content&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;div class&amp;#x3D;&amp;quot;box&amp;quot;&amp;gt;Demo&amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;方法2-针对固定宽度的任意元素-块-内联块-内联均可-使用绝对定位absolute和负边距&quot;&gt;&lt;a href=&quot;#方法2-针对固定宽度的任意元素-块-内联块-内联均可-使用绝对定位absolute和负边距&quot; class=&quot;headerlink&quot; title=&quot;方法2:针对固定宽度的任意元素(块/内联块/内联均可),使用绝对定位absolute和负边距&quot;&gt;&lt;/a&gt;方法2:针对固定宽度的任意元素(块/内联块/内联均可),使用绝对定位absolute和负边距&lt;/h2&gt;&lt;h3 id=&quot;CSS-1&quot;&gt;&lt;a href=&quot;#CSS-1&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.content&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin-left: -50px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    background-color: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;HTML-1&quot;&gt;&lt;a href=&quot;#HTML-1&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class&amp;#x3D;&amp;quot;content&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;div class&amp;#x3D;&amp;quot;box&amp;quot;&amp;gt;Demo&amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="CSS" scheme="https://jihuistudy.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>查漏补缺-css中宽高的百分比参照</title>
    <link href="https://jihuistudy.github.io/2020/09/03/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-css%E4%B8%AD%E5%AE%BD%E9%AB%98%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E5%8F%82%E7%85%A7/"/>
    <id>https://jihuistudy.github.io/2020/09/03/%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-css%E4%B8%AD%E5%AE%BD%E9%AB%98%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E5%8F%82%E7%85%A7/</id>
    <published>2020-09-03T05:57:48.000Z</published>
    <updated>2020-09-03T06:42:17.260Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ul&gt;
&lt;li&gt;&lt;p&gt;百分比数参照物&lt;br&gt; 父元素宽度：padding，margin，width，text-indent&lt;br&gt; 父元素高度：height&lt;br&gt; 自身：transform中的translate（）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他单位&lt;br&gt;
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="https://jihuistudy.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>圣杯布局与双飞翼布局究极解析</title>
    <link href="https://jihuistudy.github.io/2020/09/03/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E4%B8%8E%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80%E7%A9%B6%E6%9E%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://jihuistudy.github.io/2020/09/03/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E4%B8%8E%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80%E7%A9%B6%E6%9E%81%E8%A7%A3%E6%9E%90/</id>
    <published>2020-09-03T01:49:13.000Z</published>
    <updated>2020-09-03T13:31:38.147Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;圣杯布局和双飞翼布局两者的功能相同，都是为了实现一个两侧宽度固定，中间宽度自适应的三栏布局。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;圣杯布局&quot;&gt;&lt;a href=&quot;#圣杯布局&quot; class=&quot;headerlink&quot; title=&quot;圣杯布局&quot;&gt;&lt;/a&gt;圣杯布局&lt;/h1&gt;&lt;h2 id=&quot;实现思路：&quot;&gt;&lt;a href=&quot;#实现思路：&quot; class=&quot;headerlink&quot; title=&quot;实现思路：&quot;&gt;&lt;/a&gt;实现思路：&lt;/h2&gt;&lt;p&gt;1.在html中,先定义好 header和 footer的样式,使之横向撑满。&lt;br&gt;2.在container中的三列设为浮动(float:left)&lt;br&gt;3.给外层的父容器container设置padding:0 150px 0 200px;空出左右区域的位置，同时添加overflow:hidden;语句形成BFC，解决父容器高度塌陷的问题&lt;br&gt;4.center要放在最前面,中间部分在DOM结构上优先，以便先行渲染&lt;br&gt;5.三列的左右两列分别定宽200px和150px,中间部分center设置100%撑满父元素container,左右两块区域被挤到下一行&lt;br&gt;6.接下来设置left区域的左边界margin-left:-100%;,让left区域回到上一行父容器的最左侧&lt;br&gt;7.但这会把center区域遮住一部分,所以通过对左区域left设置相对定位，1eft:-200px;把left拉到父元素外面，定位到页面的最左侧，填补父元素空出的左内边距&lt;br&gt;8.同样的,对于right区域,设置 margin-left:-150px;把right拉回第一行，使用相对定位，设置right:-150px;填补父容器空出的右内边距&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="CSS" scheme="https://jihuistudy.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>解决Hexo博客引入本地图片不显示问题</title>
    <link href="https://jihuistudy.github.io/2020/09/02/%E8%A7%A3%E5%86%B3Hexo%E5%8D%9A%E5%AE%A2%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <id>https://jihuistudy.github.io/2020/09/02/%E8%A7%A3%E5%86%B3Hexo%E5%8D%9A%E5%AE%A2%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</id>
    <published>2020-09-02T05:38:35.000Z</published>
    <updated>2020-09-02T05:59:55.166Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装一个图片路径转换的插件，这个插件名字是hexo-asset-image&lt;br&gt;&lt;code&gt;npm install https://github.com/CodeFalling/hexo-asset-image
        
      
    
    </summary>
    
    
      <category term="探索" scheme="https://jihuistudy.github.io/categories/%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="hexo" scheme="https://jihuistudy.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>前端复习企划3-CSS3</title>
    <link href="https://jihuistudy.github.io/2020/09/01/CSS3/"/>
    <id>https://jihuistudy.github.io/2020/09/01/CSS3/</id>
    <published>2020-09-01T10:54:37.000Z</published>
    <updated>2020-09-04T12:27:03.283Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3&quot;&gt;&lt;a href=&quot;#CSS3&quot; class=&quot;headerlink&quot; title=&quot;CSS3&quot;&gt;&lt;/a&gt;CSS3&lt;/h1&gt;&lt;h2 id=&quot;1-CSS3新增基本选择器&quot;&gt;&lt;a href=&quot;#1-CSS3新增基本选择器&quot; class=&quot;headerlink&quot; title=&quot;1.CSS3新增基本选择器&quot;&gt;&lt;/a&gt;1.CSS3新增基本选择器&lt;/h2&gt;&lt;h2 id=&quot;2-CSS3新增属性选择器&quot;&gt;&lt;a href=&quot;#2-CSS3新增属性选择器&quot; class=&quot;headerlink&quot; title=&quot;2.CSS3新增属性选择器&quot;&gt;&lt;/a&gt;2.CSS3新增属性选择器&lt;/h2&gt;&lt;h2 id=&quot;3-CSS3子元素伪类选择器&quot;&gt;&lt;a href=&quot;#3-CSS3子元素伪类选择器&quot; class=&quot;headerlink&quot; title=&quot;3.CSS3子元素伪类选择器&quot;&gt;&lt;/a&gt;3.CSS3子元素伪类选择器&lt;/h2&gt;&lt;p&gt;-p:first-of-type 选择属于其父元素的首个&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;元素的每个&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素。&lt;br&gt;-p:last-of-type 选择属于其父元素的最后 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;元素的每个&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素。&lt;br&gt;-p:only-of-type 选择属于其父元素唯一的 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;元素的每个 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素。&lt;br&gt;-p:only-child 选择属于其父元素的唯一子元素的每个 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素。&lt;br&gt;-p:nth-child(2) 选择属于其父元素的第二个子元素的每个 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素。&lt;/p&gt;
&lt;h2 id=&quot;4-CSS3过渡属性transition，动画属性animation与转换属性transform介绍&quot;&gt;&lt;a href=&quot;#4-CSS3过渡属性transition，动画属性animation与转换属性transform介绍&quot; class=&quot;headerlink&quot; title=&quot;4.CSS3过渡属性transition，动画属性animation与转换属性transform介绍&quot;&gt;&lt;/a&gt;4.CSS3过渡属性transition，动画属性animation与转换属性transform介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;过渡属性transition&lt;br&gt;需要触发一个事件才能改变属性&lt;/li&gt;
&lt;li&gt;四个属性为：&lt;br&gt;transition-property 指定CSS属性的name，transition效果&lt;br&gt;transition-duration transition效果需要指定多少秒或毫秒才能完成&lt;br&gt;transition-timing-function 指定transition效果的转速曲线&lt;br&gt;&lt;img src=&quot;/2020/09/01/CSS3/css31.jpg&quot; alt=&quot;Alt&quot;&gt;&lt;br&gt;transition-delay 定义transition效果延迟多久开始&lt;br&gt;简写：&lt;br&gt;transition: property duration timing-function delay;&lt;/li&gt;
&lt;li&gt;实例：&lt;br&gt;将鼠标悬停在一个div元素上，更改宽度和高度用平稳过渡效果&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width:100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	height:100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	background:red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	transition-property:width,height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	transition-duration:2s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	transition-timing-function: ease;&amp;#x2F;*默认值ease*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#x2F;* Safari *&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-webkit-transition-property:width,height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-webkit-transition-duration:2s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-webkit-transition-timing-function: ease;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div:hover&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	width:300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	height:300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端复习企划3-CSS</title>
    <link href="https://jihuistudy.github.io/2020/09/01/CSS/"/>
    <id>https://jihuistudy.github.io/2020/09/01/CSS/</id>
    <published>2020-09-01T02:07:19.000Z</published>
    <updated>2020-09-05T01:51:26.754Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h1&gt;&lt;h2 id=&quot;1-CSS哪些样式具有继承性？哪些没有？&quot;&gt;&lt;a href=&quot;#1-CSS哪些样式具有继承性？哪些没有？&quot; class=&quot;headerlink&quot; title=&quot;1.CSS哪些样式具有继承性？哪些没有？&quot;&gt;&lt;/a&gt;1.CSS哪些样式具有继承性？哪些没有？&lt;/h2&gt;&lt;p&gt;与字体、段落相关的样式通常都可以继承，与尺寸（盒子模型）相关的样式通常不能继承，颜色color，透明度opacity可以继承，背景颜色background-color不可以继承&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字体相关属性&lt;br&gt;font-family 字体系列&lt;br&gt;font-weight 字体粗细程度&lt;br&gt;font-size 字体大小&lt;br&gt;font-style 字体风格&lt;/li&gt;
&lt;li&gt;文本相关属性&lt;br&gt;text-indent 文本缩进&lt;br&gt;text-align 文本对齐方式&lt;br&gt;line-height 行高&lt;br&gt;color 文本颜色&lt;/li&gt;
&lt;li&gt;元素可见性&lt;br&gt;visibility 控制元素的显示和隐藏&lt;/li&gt;
&lt;li&gt;列表布局属性&lt;br&gt;list-style 列表风格 包括list-style-type list-style-image等&lt;/li&gt;
&lt;li&gt;光标属性&lt;br&gt;cursor 光标显示的各种形态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-浮动模型与层模型相关概念&quot;&gt;&lt;a href=&quot;#2-浮动模型与层模型相关概念&quot; class=&quot;headerlink&quot; title=&quot;2.浮动模型与层模型相关概念&quot;&gt;&lt;/a&gt;2.浮动模型与层模型相关概念&lt;/h2&gt;&lt;p&gt;标签元素一旦有position:absolute;或float:left/right;语句其中之一，元素就会变成内联块元素inline-block&lt;br&gt;所以任何元素都可以实现浮动&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浮动模型&lt;br&gt;浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2021秋笔试题汇总</title>
    <link href="https://jihuistudy.github.io/2020/09/01/2021%E7%A7%8B%E7%AC%94%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://jihuistudy.github.io/2020/09/01/2021%E7%A7%8B%E7%AC%94%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2020-09-01T01:11:48.000Z</published>
    <updated>2020-09-01T02:06:02.325Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;持续更新&quot;&gt;&lt;a href=&quot;#持续更新&quot; class=&quot;headerlink&quot; title=&quot;持续更新&quot;&gt;&lt;/a&gt;持续更新&lt;/h1&gt;&lt;h2 id=&quot;2021-CVTE笔试题&quot;&gt;&lt;a href=&quot;#2021-CVTE笔试题&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔试" scheme="https://jihuistudy.github.io/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端复习企划2-HTML5</title>
    <link href="https://jihuistudy.github.io/2020/08/31/HTML5/"/>
    <id>https://jihuistudy.github.io/2020/08/31/HTML5/</id>
    <published>2020-08-31T12:10:53.000Z</published>
    <updated>2020-09-01T01:57:55.554Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h1&gt;&lt;h2 id=&quot;1-HTML5有哪些新特性？移除了哪些元素？&quot;&gt;&lt;a href=&quot;#1-HTML5有哪些新特性？移除了哪些元素？&quot; class=&quot;headerlink&quot; title=&quot;1.HTML5有哪些新特性？移除了哪些元素？&quot;&gt;&lt;/a&gt;1.HTML5有哪些新特性？移除了哪些元素？&lt;/h2&gt;&lt;h2 id=&quot;2-如何区别HTML与HTML5？&quot;&gt;&lt;a href=&quot;#2-如何区别HTML与HTML5？&quot; class=&quot;headerlink&quot; title=&quot;2.如何区别HTML与HTML5？&quot;&gt;&lt;/a&gt;2.如何区别HTML与HTML5？&lt;/h2&gt;&lt;p&gt;-概念：HTML即超文本标记语言，标准通用标记语言下的一个应用。“超文本”就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。HTML5是HTML的第五次重大修改而成的，可以理解为升级版，但里面的内容是非常丰富的　　&lt;br&gt;-区分 html 和 html5有很多方法，下面举例看一下区别：　　&lt;br&gt;1.在文档类型声明上　　&lt;br&gt;html:&lt;br&gt;&lt;code&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;quot;&amp;gt;&lt;/code&gt;&lt;br&gt;HTML5:&lt;br&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;　&lt;br&gt;说明：在文档声明上，html代码很长，而html5只有简简单单的声明。　　&lt;br&gt;2.在结构语义上　　&lt;br&gt;html4.0：没有体现结构语义化的标签　　&lt;br&gt;html5：在语义上却有很大的优势。提供了一些新的html5标签，比如:&lt;br&gt;&lt;code&gt;&amp;lt;header&amp;gt; 、&amp;lt;nav&amp;gt;、&amp;lt;article&amp;gt;、&amp;lt;aside&amp;gt;、&amp;lt;footer&amp;gt;&lt;/code&gt;&lt;br&gt;3.在html5新特性上&lt;/p&gt;
&lt;h2 id=&quot;3-为什么HTML5只需要写-lt-DOCTYPE-HTML-gt&quot;&gt;&lt;a href=&quot;#3-为什么HTML5只需要写-lt-DOCTYPE-HTML-gt&quot; class=&quot;headerlink&quot; title=&quot;3.为什么HTML5只需要写&amp;lt;!DOCTYPE HTML&amp;gt;?&quot;&gt;&lt;/a&gt;3.为什么HTML5只需要写&lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/code&gt;?&lt;/h2&gt;&lt;p&gt;HTML5不基于SGML(标准通用标记语言)，因此不需要DTD(文档类型定义)，但是需要doctype来规范浏览器的行为。而HTML基于SGML，需要DTD，才能告知浏览器所使用的文档类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端复习企划1-HTML</title>
    <link href="https://jihuistudy.github.io/2020/08/31/HTML/"/>
    <id>https://jihuistudy.github.io/2020/08/31/HTML/</id>
    <published>2020-08-31T08:22:10.000Z</published>
    <updated>2020-09-01T12:58:09.204Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;1-DOCTYPE有什么意义&quot;&gt;&lt;a href=&quot;#1-DOCTYPE有什么意义&quot; class=&quot;headerlink&quot; title=&quot;1.DOCTYPE有什么意义?&quot;&gt;&lt;/a&gt;1.DOCTYPE有什么意义?&lt;/h2&gt;&lt;p&gt;声明文件类型定义（DTD），位于文档中最前面，作用是为了告知浏览器应该用哪种文档类型规范来解析文档。&lt;/p&gt;
&lt;h2 id=&quot;2-如何区分严格模式和混杂模式？怎么区分？区分的意义是什么？&quot;&gt;&lt;a href=&quot;#2-如何区分严格模式和混杂模式？怎么区分？区分的意义是什么？&quot; class=&quot;headerlink&quot; title=&quot;2.如何区分严格模式和混杂模式？怎么区分？区分的意义是什么？&quot;&gt;&lt;/a&gt;2.如何区分严格模式和混杂模式？怎么区分？区分的意义是什么？&lt;/h2&gt;&lt;p&gt;-定义&lt;br&gt;严格模式（标准模式),浏览器按照W3C标准来解析；&lt;br&gt;混杂模式，向后兼容的解析方法，浏览器用自己的方式解析代码。&lt;/p&gt;
&lt;p&gt;-如何区分？&lt;br&gt;用DTD来判断&lt;br&gt;严格格式DTD——严格模式；&lt;br&gt;有URL的过渡DTD——严格模式，没有URL的过渡DTD——混杂模式；&lt;br&gt;DTD不存在/格式不对——混杂模式；&lt;br&gt;HTML5没有严格和混杂之分&lt;/p&gt;
&lt;p&gt;-区分的意义&lt;br&gt;严格模式的排版和js运行模式以浏览器支持的最高标准运行。如果只存在严格模式，那么很多旧网站站点无法工作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://jihuistudy.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="https://jihuistudy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树概览</title>
    <link href="https://jihuistudy.github.io/2020/04/23/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A6%82%E8%A7%88/"/>
    <id>https://jihuistudy.github.io/2020/04/23/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%A6%82%E8%A7%88/</id>
    <published>2020-04-23T05:58:53.000Z</published>
    <updated>2020-04-23T12:32:04.040Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;树是用来模拟具有树状结构性质的数据集合。根据它的特性可以分为非常多的种类，对于我们来讲，掌握二叉树这种结构就足够了，它也是树最简单、应用最广泛的种类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二叉树是一种典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://jihuistudy.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://jihuistudy.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="非原创" scheme="https://jihuistudy.github.io/tags/%E9%9D%9E%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
</feed>
